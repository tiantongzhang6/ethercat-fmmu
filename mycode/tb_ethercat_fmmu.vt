`timescale 1ns / 1ps

module tb_ethercat_fmmu;

    // 输入信号
    reg rxc;
    reg subdv;
    reg [3:0] rx_data;
    reg [7:0] sub_command;
    reg [31:0] sub_address;
    reg [15:0] sub_len;
    reg [7:0] bus_data_in;

    // 输出信号
    wire [3:0] tx_data;
    wire tx_match;
    wire [1:0] sub_wkc;
    wire [15:0] bus_address;
    wire [7:0] bus_data_out;
    wire [7:0] data_to_sm;
    wire bus_rd;
    wire bus_wr;
    wire bus_match;

    // 实例化待测模块
    ethercat_fmmu uut (
      .rxc(rxc),
      .subdv(subdv),
      .rx_data(rx_data),
      .sub_command(sub_command),
      .sub_address(sub_address),
      .sub_len(sub_len),
      .bus_data_in(bus_data_in),
      .tx_data(tx_data),
      .tx_match(tx_match),
      .sub_wkc(sub_wkc),
      .bus_address(bus_address),
      .bus_data_out(bus_data_out),
      .data_to_sm(data_to_sm),
      .bus_rd(bus_rd),
      .bus_wr(bus_wr),
      .bus_match(bus_match)
    );

    // 时钟信号生成
    initial begin
        rxc = 0;
        forever #5 rxc = ~rxc; // 假设时钟周期为10ns
    end

    // 测试激励
    initial begin
        // 初始化输入信号
        subdv = 0;
        rx_data = 4'b0000;
        sub_command = 8'b00000000;
        sub_address = 32'b0;
        sub_len = 16'b0;
        bus_data_in = 8'b0;

        // 测试场景1：subdv = 0
        #10;
        // 测试场景2：subdv = 1，其他信号设置不同值
        subdv = 1;
        sub_command = 8'd10;
        sub_address = 32'h1000;
        sub_len = 16'h0010;
        #20;

        // 测试场景3：改变sub_command为11
        sub_command = 8'd11;
        #20;

        // 更多测试场景可继续添加
        $finish;
    end

endmodule